<?php

namespace App\Http\Controllers;

use App\Helpers\GptAI;
use App\Models\User;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Throwable;

class UserController extends Controller
{
    public function storeAutoGeneratedData(string $dataQuantity): JsonResponse
    {
        try {
            $prompt = $this->promptDefinition($dataQuantity, User::all());

            $gpt = new GptAI(base_path('storage/certificates/cacert.pem'));

            $response = $gpt->openAI(getenv("OPEN_API_KEY"), $prompt);

            if ($response['error']) {
                throw new \Exception($response['message']);
            }

            $firstChoice = json_decode($response['response']->choices[0]->message->content, true);

            foreach ($firstChoice as $generatedUser) {
                $this->createUser($generatedUser);
            }

            return response()->json([
                "status" => "SUCCESS",
                "message" => "Datos generados correctamente",
                "data" => $firstChoice
            ]);
        } catch (Throwable $th) {
            return response()->json([
                "status" => "ERROR",
                "message" => $th->getMessage()
            ]);
        }
    }

    private function promptDefinition(string $dataQuantity, $users): string
    {
        $prompt = "Genera $dataQuantity conjuntos de datos aleatorio que incluya nombre, email y nombre de una imagen. Asegúrate de que los datos generados sean únicos y no coincidan con ningún dato existente en una base de datos.
            
        Los siguientes datos existen actualmente en la base de datos: \n";

        foreach ($users as $user) {
            $prompt .= " - Nombre: $user->name, Email: $user->email, Imagen: $user->image_path \n";
        }

        $prompt .= "Los nombres pueden repetirse, pero los emails y nombres de imágenes deben ser únicos, adicionalmente el nombre de la imagen solo debe ser el nombre, no la ruta ni el formato solo el nombre. La salida no debe tener nada mas debe que un JSON que
        contenga un array de conjuntos de datos, donde cada conjunto de datos esté representado como un objeto con las claves 'nombre', 'email' e 'imagen'.";

        return $prompt;
    }

    private function createUser(array $userData): void
    {
        $user = new User();
        $user->name = $userData["nombre"];
        $user->email = $userData["email"];
        $user->image_path = "storage/app/public/" . $userData["imagen"] . ".png";
        $user->save();
    }

    public function indexAll(): JsonResponse
    {
        $users = User::paginate(10);

        return response()->json([
            "status" => "SUCCESS",
            "message" => "Datos obtenidos correctamente",
            "data" => $users
        ]);
    }
}

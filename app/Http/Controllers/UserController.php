<?php

namespace App\Http\Controllers;

use App\Helpers\GptAI;
use App\Models\User;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Throwable;

class UserController extends Controller
{
    /**
     * Genera conjuntos de datos de usuarios automáticamente y los guarda en la base de datos.
     *
     * @param  string $dataQuantity Cantidad de datos a generar.
     * @return JsonResponse
     */
    public function storeAutoGeneratedData(string $dataQuantity): JsonResponse
    {
        try {
            // Genera el prompt para la inteligencia artificial.
            $prompt = $this->promptDefinition($dataQuantity, User::all());

            // Inicializa la instancia de GptAI.
            $gpt = new GptAI();

            // Obtiene la respuesta de la inteligencia artificial.
            $response = $gpt->openAI($prompt);

            // Maneja errores si hay algún problema en la generación de datos.
            if ($response['error']) {
                throw new \Exception($response['message']);
            }

            // Decodifica y guarda los datos generados en la base de datos.
            $firstChoice = json_decode($response['response']->choices[0]->message->content, true);
            foreach ($firstChoice as $generatedUser) {
                $this->createUser($generatedUser);
            }

            // Retorna una respuesta JSON con los datos generados.
            return response()->json([
                "status" => "SUCCESS",
                "message" => "Datos generados correctamente",
                "data" => $firstChoice
            ]);
        } catch (Throwable $th) {
            // Retorna una respuesta JSON en caso de error.
            return response()->json([
                "status" => "ERROR",
                "message" => $th->getMessage()
            ]);
        }
    }

    /**
     * Define el prompt para la generación de datos de usuarios.
     *
     * @param  string $dataQuantity Cantidad de datos a generar.
     * @param  mixed $users Lista de usuarios existentes en la base de datos.
     * @return string El prompt generado.
     */
    private function promptDefinition(string $dataQuantity, $users): string
    {
        $prompt = "Genera $dataQuantity conjuntos de datos aleatorio que incluya nombre, email y nombre de una imagen. Asegúrate de que los datos generados sean únicos y no coincidan con ningún dato existente en una base de datos.
            
        Los siguientes datos existen actualmente en la base de datos: \n";

        if (!is_null($users)) {
            foreach ($users as $user) {
                $prompt .= " - Nombre: $user->name, Email: $user->email, Imagen: $user->image_path \n";
            }
        }

        $prompt .= "Los nombres pueden repetirse, pero los emails y nombres de imágenes deben ser únicos, adicionalmente el nombre de la imagen solo debe ser el nombre, no la ruta ni el formato solo el nombre. La salida no debe tener nada mas debe que un JSON que
        contenga un array de conjuntos de datos, donde cada conjunto de datos esté representado como un objeto con las claves 'nombre', 'email' e 'imagen'.";

        return $prompt;
    }

    /**
     * Crea un nuevo usuario en la base de datos.
     *
     * @param  array $userData Datos del usuario a crear.
     * @return void
     */
    private function createUser(array $userData): void
    {
        $user = new User();
        $user->name = $userData["nombre"];
        $user->email = $userData["email"];
        $user->image_path = "storage/app/public/" . $userData["imagen"] . ".png";
        $user->save();
    }

    /**
     * Obtiene todos los usuarios de la base de datos.
     *
     * @return JsonResponse
     */
    public function indexAll(): JsonResponse
    {
        $users = User::paginate(10);

        return response()->json([
            "status" => "SUCCESS",
            "message" => "Datos obtenidos correctamente",
            "data" => $users
        ]);
    }

    /**
     * Obtiene un usuario específico de la base de datos por su ID.
     *
     * @param  mixed $id ID del usuario.
     * @return JsonResponse
     */
    public function show($id): JsonResponse
    {
        try {
            $user = User::findOrFail($id);

            return response()->json([
                "status" => "SUCCESS",
                "message" => "Usuario obtenido correctamente",
                "data" => $user
            ]);
        } catch (\Throwable $th) {
            return response()->json([
                "status" => "ERROR",
                "message" => $th->getMessage()
            ]);
        }
    }

    /**
     * Actualiza un usuario específico en la base de datos por su ID.
     *
     * @param  Request $request Datos de actualización del usuario.
     * @param  mixed $id ID del usuario.
     * @return JsonResponse
     */
    public function update(Request $request, $id): JsonResponse
    {
        try {
            $user = User::findOrFail($id);
            $user->update($request->all());

            return response()->json([
                "status" => "SUCCESS",
                "message" => "Usuario actualizado correctamente",
                "data" => $user
            ]);
        } catch (Throwable $th) {
            return response()->json([
                "status" => "ERROR",
                "message" => $th->getMessage()
            ]);
        }
    }

    public function delete($id): JsonResponse
    {
        try {
            $user = User::findOrFail($id);
            $user->delete();

            return response()->json([
                "status" => "SUCCESS",
                "message" => "Usuario eliminado correctamente"
            ]);
        } catch (Throwable $th) {
            return response()->json([
                "status" => "ERROR",
                "message" => $th->getMessage()
            ]);
        }
    }
}

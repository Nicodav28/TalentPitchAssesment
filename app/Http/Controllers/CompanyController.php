<?php

namespace App\Http\Controllers;

use App\Helpers\GptAI;
use App\Models\Company;
use App\Models\User;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;

class CompanyController extends Controller
{
    /**
     * Genera conjuntos de datos de empresas automáticamente y los guarda en la base de datos.
     *
     * @param  string $dataQuantity Cantidad de datos a generar.
     * @return JsonResponse
     */
    public function storeAutoGeneratedData(string $dataQuantity)
    {
        try {
            // Obtiene todas las empresas existentes en la base de datos.
            $companies = Company::all();

            // Genera el prompt para la inteligencia artificial.
            $prompt = $this->promptDefinition($dataQuantity, $companies);

            // Inicializa la instancia de GptAI.
            $gpt = new GptAI();

            // Obtiene la respuesta de la inteligencia artificial.
            $response = $gpt->openAI($prompt);

            // Maneja errores si hay algún problema en la generación de datos.
            if ($response['error']) {
                throw new \Exception($response['message']);
            }

            // Decodifica y guarda los datos generados en la base de datos.
            $firstChoice = $response['response']->choices[0]->message->content;
            $firstChoice = json_decode($firstChoice, true);
            foreach ($firstChoice as $generatedCompanie) {
                $company = new Company();
                $company->name = $generatedCompanie["nombre"];
                $company->image_path = $generatedCompanie["imagen"];
                $company->location = $generatedCompanie["ubicacion"];
                $company->industry = $generatedCompanie["industria"];
                $company->user_id = $generatedCompanie["usuarioId"];
                $company->save();
            }

            // Retorna una respuesta JSON con los datos generados.
            return response()->json([
                "status" => "SUCCESS",
                "message" => "Datos generados correctamente",
                "data" => $firstChoice
            ], 200);
        } catch (\Throwable $th) {
            // Retorna una respuesta JSON en caso de error.
            return response()->json([
                "status" => "ERROR",
                "message" => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Define el prompt para la generación de datos de empresas.
     *
     * @param  string $dataQuantity Cantidad de datos a generar.
     * @param  mixed $params Parámetros adicionales para el prompt.
     * @return string El prompt generado.
     */
    private function promptDefinition(string $dataQuantity, $params): string
    {
        $prompt = "Genera $dataQuantity conjuntos de datos aleatorios donde cada conjunto debe tener un nombre ficticio de una empresa, un nombre de una imagen de la empresa, la ubicacion de la empresa,
        la industria a la que pertenece esa empresa y alguno de los siguientes identificadores de usuarios debe ser asociado a esa empresa:";

        // Obtiene todos los usuarios existentes en la base de datos.
        $users = User::all();

        foreach ($users as $user) {
            $prompt .= " - $user->id - ";
        }

        // Agrega información sobre las empresas existentes en la base de datos al prompt.
        $prompt .= "Ni el nombre de la empresa, ni el nombre de la imagen pueden repetirse, es decir deben ser datos únicos y no deben existir en la base de datos, los siguientes datos existen actualmente en la base de datos: \n";
        foreach ($params as $param) {
            $prompt .= " - Nombre: $param->name, Imagen: $param->image_path, Ubicacion: $param->location, Industria $param->industry, UsuarioId: $param->user_id \n";
        }

        // Describe el formato esperado de la salida.
        $prompt .= "La salida no debe tener nada mas que un JSON que contenga un array de conjuntos de datos, donde cada conjunto de datos esté representado como un objeto con las claves 'nombre', 'imagen', 'ubicacion', 'industria' y 'usuarioId'.";

        return $prompt;
    }

    /**
     * Obtiene todas las empresas de la base de datos.
     *
     * @return JsonResponse
     */
    public function indexAll()
    {
        $companies =  Company::paginate(10);

        return response()->json([
            "status" => "SUCCESS",
            "message" => "Datos obtenidos correctamente",
            "data" => $companies
        ], 200);
    }

    public function update(Request $request, $id): JsonResponse
    {
        try {
            $company = Company::findOrFail($id);
            $company->update($request->all());

            return response()->json([
                "status" => "SUCCESS",
                "message" => "Empresa actualizada correctamente",
                "data" => $company
            ], 200);
        } catch (\Throwable $th) {
            return response()->json([
                "status" => "ERROR",
                "message" => $th->getMessage()
            ], 500);
        }
    }

    public function delete($id): JsonResponse
    {
        try {
            $company = Company::findOrFail($id);
            $company->delete();

            return response()->json([
                "status" => "SUCCESS",
                "message" => "Empresa eliminada correctamente"
            ], 200);
        } catch (\Throwable $th) {
            return response()->json([
                "status" => "ERROR",
                "message" => $th->getMessage()
            ], 500);
        }
    }

    public function show($id): JsonResponse
    {
        try {
            $company = Company::findOrFail($id);

            return response()->json([
                "status" => "SUCCESS",
                "message" => "Empresa obtenida correctamente",
                "data" => $company
            ], 200);
        } catch (\Throwable $th) {
            return response()->json([
                "status" => "ERROR",
                "message" => $th->getMessage()
            ], 500);
        }
    }
}

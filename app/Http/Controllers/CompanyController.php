<?php

namespace App\Http\Controllers;

use App\Helpers\GptAI;
use App\Models\Company;
use App\Models\User;

class CompanyController extends Controller
{
    public function storeAutoGeneratedData(string $dataQuantity)
    {
        try {
            $companies = Company::all();

            $prompt = $this->promptDefinition($dataQuantity, $companies);

            $gpt = new GptAI();

            $response = $gpt->openAI($prompt);

            if ($response['error']) {
                throw new \Exception($response['message']);
            }

            $firstChoice = $response['response']->choices[0]->message->content;

            $firstChoice = json_decode($firstChoice, true);

            foreach ($firstChoice as $generatedCompanie) {
                $company = new Company();
                $company->name = $generatedCompanie["nombre"];
                $company->image_path = $generatedCompanie["imagen"];
                $company->location = $generatedCompanie["ubicacion"];
                $company->industry = $generatedCompanie["industria"];
                $company->user_id = $generatedCompanie["usuarioId"];
                $company->save();
            }

            return response()->json(
                [
                    "status" => "SUCCESS",
                    "message" => "Datos generados correctamente",
                    "data" => $firstChoice
                ]
            );
        } catch (\Throwable $th) {
            return response()->json(
                [
                    "status" => "ERROR",
                    "message" => $th->getMessage()
                ]
            );
        }
    }

    private function promptDefinition(string $dataQuantity, $params): string
    {
        $prompt = "Genera $dataQuantity conjuntos de datos aleatorios donde cada conjunto debe tener un nombre ficticio de una empresa, un nombre de una imagen de la empresa, la ubicacion de la empresa,
        la industria a la que pertenece esa empresa y alguno de los siguientes identificadores de usuarios debe ser asociado a esa empresa:";

        $users = User::all();

        foreach ($users as $user) {
            $prompt .= " - $user->id - ";
        }

        $prompt .= "Ni el nombre de la empresa, ni el nombre de la imagen pueden repetirse, es decir deben ser datos unicos y no deben existir en la base de datos, los siguientes datos existen actualmente en la base de datos: \n";

        foreach ($params as $param) {
            $prompt .= " - Nombre: $param->name, Imagen: $param->image_path, Ubicacion: $param->location, Industria $param->industry, UsuarioId: $param->user_id \n";
        }

        $prompt .= "La salida no debe tener nada mas que un JSON que contenga un array de conjuntos de datos, donde cada conjunto de datos estÃ© representado como un objeto con las claves 'nombre', 'imagen', 'ubicacion', 'industria' y 'usuarioId'.";

        return $prompt;
    }

    public function indexAll()
    {
        $companies =  Company::paginate(10);

        return response()->json([
            "status" => "SUCCESS",
            "message" => "Datos obtenidos correctamente",
            "data" => $companies
        ]);
    }
}

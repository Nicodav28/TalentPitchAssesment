<?php

namespace App\Http\Controllers;

use App\Helpers\GptAI;
use App\Models\Program;
use App\Models\User;
use Illuminate\Http\Request;

class ProgramController extends Controller
{
    public function storeAutoGeneratedData(string $dataQuantity)
    {
        try {
            $prompt = $this->promptDefinition($dataQuantity);

            $gpt = new GptAI;

            $response = $gpt->openAI($prompt);

            if ($response['error']) {
                throw new \Exception($response['message']);
            }

            $firstChoice = $response['response']->choices[0]->message->content;

            $firstChoice = json_decode($firstChoice, true);

            foreach ($firstChoice as $generatedProgram) {
                $program = new Program();
                $program->title = $generatedProgram["titulo"];
                $program->description = $generatedProgram["descripcion"];
                $program->start_date = $generatedProgram["fecha_inicio"];
                $program->end_date = $generatedProgram["fecha_fin"];
                $program->user_id = $generatedProgram["usuarioId"];
                $program->save();
            }

            return response()->json(
                [
                    "status" => "SUCCESS",
                    "message" => "Datos generados correctamente",
                    "data" => $firstChoice
                ]
            );
        } catch (\Throwable $th) {
            return response()->json(
                [
                    "status" => "ERROR",
                    "message" => $th->getMessage()
                ]
            );
        }
    }

    private function promptDefinition(string $dataQuantity): string
    {
        $prompt = "Genera $dataQuantity conjuntos de datos aleatorios donde cada conjunto debe tener un nombre ficticio de una vacante laboral de ambito profesional, la descripcion de esa vacante laboral, la fecha de inicio de postulacion de candidatos,
        la fecha final de postulacion de candidatos y alguno de los siguientes identificadores de usuarios debe ser asociado a esa vacante laboral:";

        $users = User::all();

        foreach ($users as $user) {
            $prompt .= " - $user->id - ";
        }

        $prompt .= "La salida no debe tener nada mas que un JSON que contenga un array de conjuntos de datos, donde cada conjunto de datos estÃ© representado como un objeto con las claves 'titulo', 'descripcion', 'fecha_inicio', 'fecha_fin' y 'usuarioId'.";

        return $prompt;
    }

    public function indexAll()
    {
        $program =  Program::paginate(10);

        return response()->json([
            "status" => "SUCCESS",
            "message" => "Datos obtenidos correctamente",
            "data" => $program
        ]);
    }
}

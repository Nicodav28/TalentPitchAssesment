<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class ProgramParticipantController extends Controller
{
    public function storeAutoGeneratedData(string $dataQuantity)
    {
        try {
            $challenges = Challenge::all();

            $prompt = $this->promptDefinition($dataQuantity, $challenges);

            $gpt = new GptAI(base_path('storage/certificates/cacert.pem'));

            $response = $gpt->openAI(getenv("OPEN_API_KEY"), $prompt);

            if ($response['error']) {
                throw new \Exception($response['message']);
            }

            $firstChoice = $response['response']->choices[0]->message->content;

            $firstChoice = json_decode($firstChoice, true);

            foreach ($firstChoice as $generatedChallenge) {
                $challenge = new Challenge();
                $challenge->title = $generatedChallenge["titulo"];
                $challenge->description = $generatedChallenge["descripcion"];
                $challenge->difficulty = $generatedChallenge["dificultad"];
                $challenge->user_id = $generatedChallenge["usuarioId"];
                $challenge->save();
            }

            return response()->json(
                [
                    "status" => "SUCCESS",
                    "message" => "Datos generados correctamente",
                    "data" => $firstChoice
                ]
            );
        } catch (\Throwable $th) {
            return response()->json(
                [
                    "status" => "ERROR",
                    "message" => $th->getMessage()
                ]
            );
        }
    }

    private function promptDefinition(string $dataQuantity, $params): string
    {
        $prompt = "Genera $dataQuantity conjuntos de datos aleatorios donde cada conjunto debe tener un título de un desafío de una vacante laboral ficticia de ámbito profesional, una descripción de ese desafío, una dificultad del 1 al 10 de ese desafío
        y alguno de los siguientes identificadores de usuarios debe ser asociado a ese desafío:";

        $users = User::all();

        foreach ($users as $user) {
            $prompt .= " - $user->id - ";
        }

        $prompt .= "Los siguientes datos existen actualmente en la base de datos: \n";

        foreach ($params as $param) {
            $prompt .= " - Titulo: $param->title, Descripcion: $param->description, Dificultad: $param->difficulty, UsuarioId: $param->user_id \n";
        }

        $prompt .= "La salida no debe tener nada mas que un JSON que contenga un array de conjuntos de datos, donde cada conjunto de datos esté representado como un objeto con las claves 'titulo', 'descripcion', 'dificultad' y 'usuarioId'.";

        return $prompt;
    }

    public function indexAll()
    {
        $challenges =  Challenge::paginate(10);

        return response()->json([
            "status" => "SUCCESS",
            "message" => "Datos obtenidos correctamente",
            "data" => $challenges
        ]);
    }
}

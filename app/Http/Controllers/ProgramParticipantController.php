<?php

namespace App\Http\Controllers;

use App\Helpers\GptAI;
use App\Models\Company;
use App\Models\Program;
use App\Models\ProgramParticipant;
use App\Models\User;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;

class ProgramParticipantController extends Controller
{
    /**
     * Genera conjuntos de datos de participantes de programas automáticamente y los guarda en la base de datos.
     *
     * @param  string $dataQuantity Cantidad de datos a generar.
     * @return JsonResponse
     */
    public function storeAutoGeneratedData(string $dataQuantity)
    {
        try {
            // Genera el prompt para la inteligencia artificial.
            $prompt = $this->promptDefinition($dataQuantity);

            // Inicializa la instancia de GptAI.
            $gpt = new GptAI;

            // Obtiene la respuesta de la inteligencia artificial.
            $response = $gpt->openAI($prompt);

            // Maneja errores si hay algún problema en la generación de datos.
            if ($response['error']) {
                throw new \Exception($response['message']);
            }

            // Decodifica y guarda los datos generados en la base de datos.
            $firstChoice = $response['response']->choices[0]->message->content;
            $firstChoice = json_decode($firstChoice, true);
            foreach ($firstChoice as $generatedprogramPart) {
                $programPart = new ProgramParticipant();
                $programPart->program_id = $generatedprogramPart["program_id"];
                $programPart->entity_type = $generatedprogramPart["entity_type"];
                $programPart->entity_id = $generatedprogramPart["entity_id"];
                $programPart->save();
            }

            // Retorna una respuesta JSON con los datos generados.
            return response()->json([
                "status" => "SUCCESS",
                "message" => "Datos generados correctamente",
                "data" => $firstChoice
            ], 200);
        } catch (\Throwable $th) {
            // Retorna una respuesta JSON en caso de error.
            return response()->json([
                "status" => "ERROR",
                "message" => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Define el prompt para la generación de datos de participantes de programas.
     *
     * @param  string $dataQuantity Cantidad de datos a generar.
     * @return string El prompt generado.
     */
    private function promptDefinition(string $dataQuantity): string
    {
        $prompt = "Genera $dataQuantity conjuntos de datos aleatorios donde cada conjunto debe tener un identificador de un programa de los que se mencionara a continuacion: ";

        $programs = Program::all();

        foreach ($programs as $program) {
            $prompt .= " - $program->id - ";
        }

        $prompt .= "Tambien debe tener un tipo de entidad que puede ser 'user', 'challenge' o 'company' y debe tener el identificador unico de esa entidad que en caso de ser user hay estos: ";

        $users = User::all();

        foreach ($users as $user) {
            $prompt .= " - $user->id - ";
        }

        $prompt .= "En caso de ser challenge hay estos: ";

        $challenges = User::all();

        foreach ($challenges as $challenge) {
            $prompt .= " - $challenge->id - ";
        }

        $prompt .= "En caso de ser company hay estos: ";

        $companies = Company::all();

        foreach ($companies as $company) {
            $prompt .= " - $company->id - ";
        }

        $prompt .= "Elije cualquier identificador siempre y cuando el identificador corresponda a la entidad que tu elijas,
        la salida no debe tener nada mas que un JSON que contenga un array de conjuntos de datos, donde cada conjunto de datos esté representado como un objeto con las claves 'program_id', 'entity_type' y 'entity_id'.";

        return $prompt;
    }

    /**
     * Obtiene todos los participantes de programas de la base de datos.
     *
     * @return JsonResponse
     */
    public function indexAll()
    {
        $programPart =  ProgramParticipant::paginate(10);

        return response()->json([
            "status" => "SUCCESS",
            "message" => "Datos obtenidos correctamente",
            "data" => $programPart
        ], 200);
    }

    /**
     * Actualiza un participante de programa específico en la base de datos por su ID.
     *
     * @param  Request $request Datos de actualización del participante de programa.
     * @param  mixed $id ID del participante de programa.
     * @return JsonResponse
     */
    public function update(Request $request, $id): JsonResponse
    {
        try {
            $programPart = ProgramParticipant::findOrFail($id);
            $programPart->update($request->all());

            return response()->json([
                "status" => "SUCCESS",
                "message" => "Participante del programa actualizado correctamente",
                "data" => $programPart
            ], 200);
        } catch (\Throwable $th) {
            return response()->json([
                "status" => "ERROR",
                "message" => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Elimina un participante de programa específico de la base de datos por su ID.
     *
     * @param  mixed $id ID del participante de programa.
     * @return JsonResponse
     */
    public function delete($id): JsonResponse
    {
        try {
            $programPart = ProgramParticipant::findOrFail($id);
            $programPart->delete();

            return response()->json([
                "status" => "SUCCESS",
                "message" => "Participante del programa eliminado correctamente"
            ], 200);
        } catch (\Throwable $th) {
            return response()->json([
                "status" => "ERROR",
                "message" => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Obtiene un participante de programa específico de la base de datos por su ID.
     *
     * @param  mixed $id ID del participante de programa.
     * @return JsonResponse
     */
    public function show($id): JsonResponse
    {
        try {
            $programPart = ProgramParticipant::findOrFail($id);

            return response()->json([
                "status" => "SUCCESS",
                "message" => "Participante del programa obtenido correctamente",
                "data" => $programPart
            ], 200);
        } catch (\Throwable $th) {
            return response()->json([
                "status" => "ERROR",
                "message" => $th->getMessage()
            ], 500);
        }
    }
}
